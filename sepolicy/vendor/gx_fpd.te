type gx_fpd, domain;
type gx_fpd_exec, exec_type, vendor_file_type, file_type;

# gx_fpd
init_daemon_domain(gx_fpd)
binder_call(gx_fpd, hal_fingerprint_default)

# Allow Binder communication
vndbinder_use(gx_fpd)

typeattribute gx_fpd data_between_core_and_vendor_violators;

allow gx_fpd { persist_drm_file gx_fpd_data_file mnt_vendor_file }:dir create_dir_perms;
allow gx_fpd { persist_drm_file gx_fpd_data_file mnt_vendor_file }:file create_file_perms;

# Need to add auth tokens to KeyStore
use_keystore(gx_fpd)
allow gx_fpd keystore:keystore_key { add_auth };

# Find KeyStore
allow gx_fpd keystore_service:service_manager { find };

# For permissions checking
binder_call(gx_fpd, system_server);
allow gx_fpd permission_service:service_manager find;

# Allow access to goodix device
allow gx_fpd gx_fpd_device:chr_file rw_file_perms;

# Allow access to tee device
allow gx_fpd tee_device:chr_file rw_file_perms;

# Allow access to ion device
allow gx_fpd ion_device:chr_file rw_file_perms;

# Allow ioctl commands
allowxperm gx_fpd self:{
    socket
    netlink_socket
    netlink_generic_socket
    netlink_kobject_uevent_socket }
  ioctl { 0 };

# Allow create socket
allow gx_fpd self:socket create_socket_perms_no_ioctl;
allow gx_fpd self:{ netlink_socket netlink_generic_socket netlink_kobject_uevent_socket } create_socket_perms_no_ioctl;

# Allow reading firmware file
r_dir_file(gx_fpd, firmware_file)

# Allow read write sysfs
allow gx_fpd sysfs:file rw_file_perms;;
allow hal_perf_default proc_meminfo:file { getattr open read };

add_service(gx_fpd, gx_fpd_service);
allow gx_fpd mnt_user_file:dir search;

# Allow read/write property
set_prop(gx_fpd, vendor_fingerprint_prop)

# Ignore all useless requests
dontaudit gx_fpd storage_file:dir search;
dontaudit gx_fpd default_prop:file read;
